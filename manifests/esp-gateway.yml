---
apiVersion: v1
kind: Namespace
metadata:
  name: esp-gateway
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: esp-gateway
  namespace: esp-gateway
provisioner: driver.longhorn.io
allowVolumeExpansion: true
parameters:
  numberOfReplicas: '3'
  staleReplicaTimeout: '2880'
  fromBackup: ''
  fsType: ext4
  dataLocality: best-effort
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: esp-gateway-images
  namespace: esp-gateway
spec:
  resources:
    requests:
      storage: 5Gi
  volumeMode: Filesystem
  accessModes:
  - ReadWriteMany
  storageClassName: esp-gateway
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: esp-gateway-logs
  namespace: esp-gateway
spec:
  resources:
    requests:
      storage: 5Gi
  volumeMode: Filesystem
  accessModes:
  - ReadWriteMany
  storageClassName: esp-gateway
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: esp-gateway
  namespace: esp-gateway
  labels:
    app: esp-gateway
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: esp-gateway
  template:
    metadata:
      labels:
        app: esp-gateway
    spec:
      containers:
      - name: esp-gateway
        image: repo.kk.int/esp-gateway/gateway:db4ba108
        env:
        - name: DEBUG
          value: "False"
        - name: TZ
          value: Europe/Berlin
        - name: INFLUXDB_HOST
          value: influxdb-svc.influxdc.svc.cluster.local
        - name: INFLUXDB_URL
          value: http://influxdb-svc.influxdb.svc.cluster.local:8086
        - name: INFLUXDB_TOKEN
          valueFrom:
            secretKeyRef:
              name: gateway-secrets
              key: influxdb-token
        - name: INFLUXDB_BUCKET
          valueFrom:
            secretKeyRef:
              name: gateway-secrets
              key: influxdb-bucket
        - name: INFLUXDB_ORG
          valueFrom:
            secretKeyRef:
              name: gateway-secrets
              key: influxdb-org
        - name: MQTT_HOST
          value: mqtt-svc.mqtt.svc.cluster.local
        - name: MQTT_PORT
          value: "1883"
        - name: MQTT_USER
          valueFrom:
            secretKeyRef:
              name: gateway-secrets
              key: mqtt-user
        - name: MQTT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: gateway-secrets
              key: mqtt-password
        - name: MQTT_BASE_TOPIC
          value: esp
        - name: MINIO_HOST
          value: s3.kk.int
          # value: '192.168.51.101'
        - name: MINIO_URL
          value: http://s3.kk.int:9000
          # value: http://192.168.51.101:9000
        - name: MINIO_PORT
          value: "9000"
        - name: MINIO_BUCKET
          valueFrom:
            secretKeyRef:
              name: gateway-secrets
              key: minio-bucket
        - name: MINIO_SECURE
          value: "False"
        - name: MINIO_ROOT_USER # MinIO Key ID
          valueFrom:
            secretKeyRef:
              name: gateway-secrets
              key: minio-root-user
        - name: MINIO_ROOT_PASSWORD # MinIO Access Key
          valueFrom:
            secretKeyRef:
              name: gateway-secrets
              key: minio-root-password
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: esp-gateway-images
          mountPath: /data
        - name: esp-gateway-logs
          mountPath: /logs
      volumes:
      - name: esp-gateway-images
        persistentVolumeClaim:
          claimName: esp-gateway-images
      - name: esp-gateway-logs
        persistentVolumeClaim:
          claimName: esp-gateway-logs
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: esp-gateway-timelapse
  namespace: esp-gateway
spec:
  schedule: "0 13 */7 * *"
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: esp-gateway-timelapse
        spec:
          restartPolicy: OnFailure
          containers:
          - name: esp-gateway-timelapse
            image: repo.kk.int/esp-gateway/timelapse:27cdbcac
            env:
            - name: DEBUG
              value: "False"
            - name: TZ
              value: Europe/Berlin
            - name: MINIO_HOST
              value: s3.kk.int
            - name: S3_HOST
              value: s3.kk.int
            - name: BUCKET
              valueFrom:
                secretKeyRef:
                  name: gateway-secrets
                  key: minio-bucket
            - name: S3_ACCESS_KEY_ID # MinIO Key ID
              valueFrom:
                secretKeyRef:
                  name: gateway-secrets
                  key: minio-root-user
            - name: S3_SECRET_ACCESS_KEY # MinIO Access Key
              valueFrom:
                secretKeyRef:
                  name: gateway-secrets
                  key: minio-root-password
            - name: NODERED
              value: nodered-svc.nodered.svc.cluster.local:1880
            - name: TELEGRAM_BOT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: gateway-secrets
                  key: telegram-bot-token
            - name: TELEGRAM_CHAT_ID
              valueFrom:
                secretKeyRef:
                  name: gateway-secrets
                  key: telegram-chat-id
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "200m"
            volumeMounts:
            - name: esp-gateway
              mountPath: /data
          volumes:
          - name: esp-gateway
            persistentVolumeClaim:
              claimName: esp-gateway-images
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: esp-gateway-archive
  namespace: esp-gateway
spec:
  schedule: "0 12 31 12 *"
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: esp-gateway-archive
        spec:
          restartPolicy: OnFailure
          containers:
          - name: esp-gateway-archive
            image: repo.kk.int/esp-gateway/archive:27cdbcac
            env:
            - name: DEBUG
              value: "False"
            - name: TZ
              value: Europe/Berlin
            - name: MINIO_HOST
              value: s3.kk.int
            - name: S3_HOST
              value: s3.kk.int
            - name: BUCKET
              valueFrom:
                secretKeyRef:
                  name: gateway-secrets
                  key: minio-bucket
            - name: S3_ACCESS_KEY_ID # MinIO Key ID
              valueFrom:
                secretKeyRef:
                  name: gateway-secrets
                  key: minio-root-user
            - name: S3_SECRET_ACCESS_KEY # MinIO Access Key
              valueFrom:
                secretKeyRef:
                  name: gateway-secrets
                  key: minio-root-password
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "200m"
            volumeMounts:
            - name: esp-gateway
              mountPath: /data
          volumes:
          - name: esp-gateway
            persistentVolumeClaim:
              claimName: esp-gateway-images
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: esp-gateway-logrotate
  namespace: esp-gateway
spec:
  schedule: "0 0 * * *"
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: esp-gateway-logrotate
        spec:
          restartPolicy: OnFailure
          containers:
          - name: esp-gateway-logrotate
            image: alpine:latest
            command:
            - /bin/sh
            - -c
            - find /logs -type f -mtime +7 -exec rm -f {} \;
            env:
            - name: DEBUG
              value: "False"
            - name: TZ
              value: Europe/Berlin
            - name: LOGS_PATH
              value: /logs
            resources:
              requests:
                memory: "64Mi"
                cpu: "50m"
              limits:
                memory: "128Mi"
                cpu: "100m"
            volumeMounts:
            - name: esp-gateway
              mountPath: /logs
          volumes:
          - name: esp-gateway
            persistentVolumeClaim:
              claimName: esp-gateway-logs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mqtt-reflector
  namespace: esp-gateway
  labels:
    app: mqtt-reflector
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: mqtt-reflector
  template:
    metadata:
      labels:
        app: mqtt-reflector
    spec:
      containers:
      - name: mqtt-reflector
        image: repo.kk.int/esp-gateway/mqtt-reflector:db4ba108
        env:
        - name: DEBUG
          value: "False"
        - name: TZ
          value: Europe/Berlin
        - name: MQTT_HOST
          value: mqtt-svc.mqtt.svc.cluster.local
        - name: MQTT_PORT
          value: "1883"
        - name: MQTT_USER
          valueFrom:
            secretKeyRef:
              name: gateway-secrets
              key: mqtt-user
        - name: MQTT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: gateway-secrets
              key: mqtt-password
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        volumeMounts:
        - name: mqtt-reflector-config
          mountPath: /config
      volumes:
      - name: mqtt-reflector-config
        configMap:
          name: mqtt-reflector-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mqtt-reflector-config
  namespace: esp-gateway
data:
  config.yaml: |
    topics:
    - in: 
        topic: test/in
        variables:
          - name: foo
            path: foo.bar
      out: 
        topic: test/out
        template: > 
          {
            "message": "{{ foo }}"
          }
    - in: 
        topic: berlin/zigbee2mqtt/balcony_temp
        variables:
          - name: temperature
            path: temperature
          - name: humidity
            path: humidity
      out: 
        topic: esp/balcony/air/00000000
        template: > 
          {
            "temperature": {{ temperature }},
            "humidity": {{ humidity }}
          }
    - in: 
        topic: stat/berlin/balcony/distance/STATUS10
        variables:
          - name: distance
            path: StatusSNS.SR04.Distance
      out:
        topic: esp/balcony/water/00000000
        template: >
          {
            "distance": {{ distance }}
          }